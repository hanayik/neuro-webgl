{
  "paths": [
    {
      "type": "file",
      "value": "index.md"
    },
    {
      "type": "dir",
      "name": "dev",
      "children": [
        {
          "type": "file",
          "value": "dev/font.md"
        },
        {
          "type": "file",
          "value": "dev/webgl.md"
        }
      ]
    },
    {
      "type": "file",
      "value": "screenshots.md"
    }
  ],
  "contents": [
    {
      "path": "index.md",
      "url": "index.html",
      "content": "# Niivue Docs\n\nThese docs are automatically generated during each build and deployed using Github pages.\n\n## Live demo\n\nThe live demo exists to show off Niivue in its current state. This is sort of like working with the garage door open. The `master` branch features and capabilities will be shown here. Sometimes demos may look odd when new features are being tested incrementally.   \n\n[Click here for a live demo](./live-demo/index.html)\n",
      "html": "<h1 id=\"niivue-docs\">Niivue Docs <a class=\"heading-anchor-permalink\" href=\"#niivue-docs\">#</a></h1>\n<p>These docs are automatically generated during each build and deployed using Github pages.</p>\n<h2 id=\"live-demo\">Live demo <a class=\"heading-anchor-permalink\" href=\"#live-demo\">#</a></h2>\n<p>The live demo exists to show off Niivue in its current state. This is sort of like working with the garage door open. The <code>master</code> branch features and capabilities will be shown here. Sometimes demos may look odd when new features are being tested incrementally.</p>\n<p><a href=\"./live-demo/index.html\">Click here for a live demo</a></p>\n",
      "id": 0
    },
    {
      "path": "dev/font.md",
      "url": "dev/font.html",
      "content": "## Introduction\n\nThere are [several approaches to render text in WebGL](https://stackoverflow.com/questions/25956272/better-quality-text-in-webgl). NiiVue uses \nViktor Chlumský's [multi-channel signed distance field](https://github.com/Chlumsky/msdfgen). The default font supplied with NiiVue is [Roboto](https://fonts.google.com/specimen/Roboto?preview.text_type=custom), created with [msdf-atlas-gen](https://github.com/Chlumsky/msdf-atlas-gen) using the command:\n\n```\nmsdf-atlas-gen.exe -font Roboto-Regular.ttf -charset chars.txt -pxrange 2 -dimensions 512 256 -format png -json fnt.json -imageout fnt.png\n```\n\nWhere chars.txt is a text file with the following characters\n\n```\n\"\\\"\\\\ ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!`?'.,;:()[]{}<>|/@^$-%+=#_&~*\"\n```\nRunning the command will generate output\n\n```\nLoaded geometry of 95 out of 95 characters.\nGlyph size: 59.65625 pixels/EM\nAtlas image file saved.\nGlyph layout and metadata written into JSON file.\n```\n\nThe typeface or character set can be changed by modifiying the commands. NiiVue will read the JSON format created by msdf-atlas-gen (version 1.1), so to change the typeface used by NiiVue, simply replace the `fnt.json` and `fnt.png` files in `public` folder.\n\n## Usage\n\nViktor Chlumský's[GLSL fragment shader](https://github.com/Chlumsky/msdfgen) is easily adapted for WebGL. The uniform screenPxRange is described by Viktor as `the distance field range in output screen pixels. For example, if the pixel range was set to 2 when generating a 32x32 distance field, and it is used to draw a quad that is 72x72 pixels on the screen, it should return 4.5 (because 72/32 * 2 = 4.5).` Note that both distance range and distance field are reported in the JSON file created by msdf-atlas-gen: `\"distanceRange\":2,\"size\":59.65625`. Therefore, the complete WebGL fragment shader is:\n\n```\n#version 300 es\nprecision highp int;\nprecision highp float;\nuniform highp sampler2D fontTexture;\nuniform vec4 fontColor;\nuniform float screenPxRange;\nin vec2 vUV;\nout vec4 color;\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\nvoid main() {\n\tvec3 msd = texture(fontTexture, vUV).rgb;\n\t//color = vec4(msd, 1.0); return;\n    float sd = median(msd.r, msd.g, msd.b);\n    float screenPxDistance = screenPxRange*(sd - 0.5);\n    float opacity = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\tcolor = vec4(fontColor.rgb , opacity);\n}\n```\n",
      "html": "<h2 id=\"introduction\">Introduction <a class=\"heading-anchor-permalink\" href=\"#introduction\">#</a></h2>\n<p>There are <a href=\"https://stackoverflow.com/questions/25956272/better-quality-text-in-webgl\">several approaches to render text in WebGL</a>. NiiVue uses\nViktor Chlumský’s <a href=\"https://github.com/Chlumsky/msdfgen\">multi-channel signed distance field</a>. The default font supplied with NiiVue is <a href=\"https://fonts.google.com/specimen/Roboto?preview.text_type=custom\">Roboto</a>, created with <a href=\"https://github.com/Chlumsky/msdf-atlas-gen\">msdf-atlas-gen</a> using the command:</p>\n<pre><code>msdf-atlas-gen.exe -font Roboto-Regular.ttf -charset chars.txt -pxrange 2 -dimensions 512 256 -format png -json fnt.json -imageout fnt.png\n</code></pre>\n<p>Where chars.txt is a text file with the following characters</p>\n<pre><code>&quot;\\&quot;\\\\ ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!`?'.,;:()[]{}&lt;&gt;|/@^$-%+=#_&amp;~*&quot;\n</code></pre>\n<p>Running the command will generate output</p>\n<pre><code>Loaded geometry of 95 out of 95 characters.\nGlyph size: 59.65625 pixels/EM\nAtlas image file saved.\nGlyph layout and metadata written into JSON file.\n</code></pre>\n<p>The typeface or character set can be changed by modifiying the commands. NiiVue will read the JSON format created by msdf-atlas-gen (version 1.1), so to change the typeface used by NiiVue, simply replace the <code>fnt.json</code> and <code>fnt.png</code> files in <code>public</code> folder.</p>\n<h2 id=\"usage\">Usage <a class=\"heading-anchor-permalink\" href=\"#usage\">#</a></h2>\n<p>Viktor Chlumský’s<a href=\"https://github.com/Chlumsky/msdfgen\">GLSL fragment shader</a> is easily adapted for WebGL. The uniform screenPxRange is described by Viktor as <code>the distance field range in output screen pixels. For example, if the pixel range was set to 2 when generating a 32x32 distance field, and it is used to draw a quad that is 72x72 pixels on the screen, it should return 4.5 (because 72/32 * 2 = 4.5).</code> Note that both distance range and distance field are reported in the JSON file created by msdf-atlas-gen: <code>&quot;distanceRange&quot;:2,&quot;size&quot;:59.65625</code>. Therefore, the complete WebGL fragment shader is:</p>\n<pre><code>#version 300 es\nprecision highp int;\nprecision highp float;\nuniform highp sampler2D fontTexture;\nuniform vec4 fontColor;\nuniform float screenPxRange;\nin vec2 vUV;\nout vec4 color;\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\nvoid main() {\n\tvec3 msd = texture(fontTexture, vUV).rgb;\n\t//color = vec4(msd, 1.0); return;\n    float sd = median(msd.r, msd.g, msd.b);\n    float screenPxDistance = screenPxRange*(sd - 0.5);\n    float opacity = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\tcolor = vec4(fontColor.rgb , opacity);\n}\n</code></pre>\n",
      "id": 1
    },
    {
      "path": "dev/webgl.md",
      "url": "dev/webgl.html",
      "content": "## Introduction\n\nThis project requires WebGL2. This specification was [finalized in January 2017](https://en.wikipedia.org/wiki/WebGL). It is supported by the current Chrome and Firefox browsers, but users of Safari must enable this `experimental` feature. NiiVue exploits WebGL2 features that [are not available in WebGL1](https://webgl2fundamentals.org/webgl/lessons/webgl2-whats-new.html). Specifically, the images are represented using non-Power of two 3D textures. The shaders used by WebGL2 are written using the [OpenGL ES 3.0](https://en.wikipedia.org/wiki/OpenGL_ES)version of the [OpenGL Shading Language (GLSL)](https://en.wikipedia.org/wiki/OpenGL_Shading_Language).\n\nhttps://gamedev.stackexchange.com/questions/132262/how-to-use-texelfetch\nbut in OpenGL when specifying an integer vertex attribute you must use glVertexAttribIPointer, not glVertexAttribPointer; see\nFor glVertexAttribIPointer ... Values are always left as integer values\nvec2 copies of the ivec2\n\n##### Textures\n\nThe term Textures refers to bitmap images that are stored on the graphics card. The WebGL context can only have a limited number of textures active at one time (with the command `activeTexture` deterimining which textures are available). You can think of these active textures as slots that are available for the shaders to access. NiiVue consistently uses the same slots for specific textures. This means that each draw call does not need to explicitly set the active textures. Therefore, these slots should be considered reserved and not used for other functions.\n\n - TEXTURE0: Background volume. This 3D scalar bitmap stores the voxel intensities of the background image.\n - TEXTURE1: Background volume colormap. This 1D RGBA bitmap converts the scalar background voxel intensities to RGBA values (e.g. Grayscale, Warm, Winter).\n - TEXTURE2: Overlay volumes. This 3D RGBA bitmap stores the blended values of all loaded overlays.\n - TEXTURE3: Font. This is a 2D bitmap that stores the [multi-channel signed distance field typeface](https://github.com/Chlumsky/msdfgen) \n - TEXTURE7: Temporary 3D texture: this is used for compute shaders to reorient volumes (e.g. reformat an image from ASR to LIP orientation).\n\n ",
      "html": "<h2 id=\"introduction\">Introduction <a class=\"heading-anchor-permalink\" href=\"#introduction\">#</a></h2>\n<p>This project requires WebGL2. This specification was <a href=\"https://en.wikipedia.org/wiki/WebGL\">finalized in January 2017</a>. It is supported by the current Chrome and Firefox browsers, but users of Safari must enable this <code>experimental</code> feature. NiiVue exploits WebGL2 features that <a href=\"https://webgl2fundamentals.org/webgl/lessons/webgl2-whats-new.html\">are not available in WebGL1</a>. Specifically, the images are represented using non-Power of two 3D textures. The shaders used by WebGL2 are written using the <a href=\"https://en.wikipedia.org/wiki/OpenGL_ES\">OpenGL ES 3.0</a>version of the <a href=\"https://en.wikipedia.org/wiki/OpenGL_Shading_Language\">OpenGL Shading Language (GLSL)</a>.</p>\n<p><a href=\"https://gamedev.stackexchange.com/questions/132262/how-to-use-texelfetch\">https://gamedev.stackexchange.com/questions/132262/how-to-use-texelfetch</a>\nbut in OpenGL when specifying an integer vertex attribute you must use glVertexAttribIPointer, not glVertexAttribPointer; see\nFor glVertexAttribIPointer … Values are always left as integer values\nvec2 copies of the ivec2</p>\n<h5 id=\"textures\">Textures <a class=\"heading-anchor-permalink\" href=\"#textures\">#</a></h5>\n<p>The term Textures refers to bitmap images that are stored on the graphics card. The WebGL context can only have a limited number of textures active at one time (with the command <code>activeTexture</code> deterimining which textures are available). You can think of these active textures as slots that are available for the shaders to access. NiiVue consistently uses the same slots for specific textures. This means that each draw call does not need to explicitly set the active textures. Therefore, these slots should be considered reserved and not used for other functions.</p>\n<ul>\n<li>TEXTURE0: Background volume. This 3D scalar bitmap stores the voxel intensities of the background image.</li>\n<li>TEXTURE1: Background volume colormap. This 1D RGBA bitmap converts the scalar background voxel intensities to RGBA values (e.g. Grayscale, Warm, Winter).</li>\n<li>TEXTURE2: Overlay volumes. This 3D RGBA bitmap stores the blended values of all loaded overlays.</li>\n<li>TEXTURE3: Font. This is a 2D bitmap that stores the <a href=\"https://github.com/Chlumsky/msdfgen\">multi-channel signed distance field typeface</a></li>\n<li>TEXTURE7: Temporary 3D texture: this is used for compute shaders to reorient volumes (e.g. reformat an image from ASR to LIP orientation).</li>\n</ul>\n",
      "id": 2
    },
    {
      "path": "screenshots.md",
      "url": "screenshots.html",
      "content": "# Niivue Example screenshots\n\n### Desktop Browsers\n\n#### Chrome\n\n![example image1](./screenshots/desktop-chrome1.png)\n\n![example image2](./screenshots/desktop-chrome2.png)\n\n### Mobile Browsers\n\n#### Android\n\n![example image3](./screenshots/mobile-android-chrome1.jpg)\n\n![example image4](./screenshots/mobile-android-chrome2.jpg)\n\n#### iOS\n\n![example image5](./screenshots/mobile-ios-safari-experimental1.png)\n\n![example image5](./screenshots/mobile-ios-safari-experimental2.png)\n\n![example image5](./screenshots/mobile-ios-safari-experimental3.png)\n\n",
      "html": "<h1 id=\"niivue-example-screenshots\">Niivue Example screenshots <a class=\"heading-anchor-permalink\" href=\"#niivue-example-screenshots\">#</a></h1>\n<h3 id=\"desktop-browsers\">Desktop Browsers <a class=\"heading-anchor-permalink\" href=\"#desktop-browsers\">#</a></h3>\n<h4 id=\"chrome\">Chrome <a class=\"heading-anchor-permalink\" href=\"#chrome\">#</a></h4>\n<p><img src=\"./screenshots/desktop-chrome1.png\" alt=\"example image1\"></p>\n<p><img src=\"./screenshots/desktop-chrome2.png\" alt=\"example image2\"></p>\n<h3 id=\"mobile-browsers\">Mobile Browsers <a class=\"heading-anchor-permalink\" href=\"#mobile-browsers\">#</a></h3>\n<h4 id=\"android\">Android <a class=\"heading-anchor-permalink\" href=\"#android\">#</a></h4>\n<p><img src=\"./screenshots/mobile-android-chrome1.jpg\" alt=\"example image3\"></p>\n<p><img src=\"./screenshots/mobile-android-chrome2.jpg\" alt=\"example image4\"></p>\n<h4 id=\"ios\">iOS <a class=\"heading-anchor-permalink\" href=\"#ios\">#</a></h4>\n<p><img src=\"./screenshots/mobile-ios-safari-experimental1.png\" alt=\"example image5\"></p>\n<p><img src=\"./screenshots/mobile-ios-safari-experimental2.png\" alt=\"example image5\"></p>\n<p><img src=\"./screenshots/mobile-ios-safari-experimental3.png\" alt=\"example image5\"></p>\n",
      "id": 3
    }
  ]
}